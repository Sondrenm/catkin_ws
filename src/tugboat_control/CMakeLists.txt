cmake_minimum_required(VERSION 2.8.3)
project(tugboat_control)
add_definitions(-std=c++11)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  roscpp
  rospy
  std_msgs
  genmsg
  geometry_msgs
  message_generation
)

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for "message_generation"
##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a run_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##	   find_package(catkin REQUIRED COMPONENTS roscpp rospy std_msgs)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

# Generate messages in the 'msg' folder
add_message_files(
	DIRECTORY
	msg
	FILES
  BoatPose.msg
  PushingForce.msg
	Thrust.msg
  TugSetpoints.msg
  Waypoint.msg
  ClearWaypoint.msg
  Path.msg
  Waypoints.msg
)

# Generate services in the 'srv' folder
add_service_files(
	DIRECTORY
	srv
	FILES
	removeOneTug.srv
  addOneTug.srv
  AvoidShipCollision.srv
  WaypointAvailable.srv
)

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

# Generate added messages and services with any dependencies listed here
generate_messages(
	DEPENDENCIES
	std_msgs
	tugboat_control
)

################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a run_depend tag for "dynamic_reconfigure"
## * In this file (CMakeLists.txt):
##   * add "dynamic_reconfigure" to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the "generate_dynamic_reconfigure_options" section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
# generate_dynamic_reconfigure_options(
#   cfg/DynReconf1.cfg
#   cfg/DynReconf2.cfg
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
  INCLUDE_DIRS include
  LIBRARIES tugboat_control
  CATKIN_DEPENDS roscpp rospy std_msgs message_runtime
  DEPENDS system_lib
)

###########
## Build ##
###########


## Specify additional locations of header files
## Your package locations should be listed before other locations
# include_directories(include)
include_directories(
  ${catkin_INCLUDE_DIRS}
)

find_package( OpenCV REQUIRED )

## Declare a C++ library
# add_library(tugboat_control
#   src/${PROJECT_NAME}/tugboat_control.cpp
# )

## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
# add_dependencies(tugboat_control ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Declare a C++ executable
add_executable(talker src/talker.cpp)
target_link_libraries(talker ${catkin_LIBRARIES})
add_dependencies(talker tugboat_control_generate_messages_cpp)

add_executable(listener src/listener.cpp)
target_link_libraries(listener ${catkin_LIBRARIES})
add_dependencies(listener tugboat_control_generate_messages_cpp)

add_executable(logger src/logger.cpp)
target_link_libraries(logger ${catkin_LIBRARIES})
add_dependencies(logger tugboat_control_generate_messages_cpp)

add_executable(CV src/CV.cpp)
target_link_libraries(CV ${catkin_LIBRARIES} ${OpenCV_LIBS})
add_dependencies(CV tugboat_control_generate_messages_cpp)

add_executable(TugController src/TugController.cpp /usr/local/include/PID_cpp/pid.cpp)
target_link_libraries(TugController ${catkin_LIBRARIES})
add_dependencies(TugController tugboat_control_generate_messages_cpp)

add_executable(TugManager src/TugManager.cpp /usr/local/include/PID_cpp/pid.cpp)
target_link_libraries(TugManager ${catkin_LIBRARIES})
add_dependencies(TugManager tugboat_control_generate_messages_cpp)

add_executable(TugSim src/TugSim.cpp)
target_link_libraries(TugSim ${catkin_LIBRARIES} ${OpenCV_LIBS})
add_dependencies(TugSim tugboat_control_generate_messages_cpp)

add_executable(WaypointDummy src/WaypointDummy.cpp)
target_link_libraries(WaypointDummy ${catkin_LIBRARIES})
add_dependencies(WaypointDummy tugboat_control_generate_messages_cpp)

add_executable(ShipControl_Generic src/ShipControl_Generic.cpp /usr/local/include/PID_cpp/pid.cpp)
target_link_libraries(ShipControl_Generic ${catkin_LIBRARIES})
add_dependencies(ShipControl_Generic tugboat_control_generate_messages_cpp)

add_executable(ShipControl_Simple src/ShipControl_Simple.cpp /usr/local/include/PID_cpp/pid.cpp)
target_link_libraries(ShipControl_Simple ${catkin_LIBRARIES})
add_dependencies(ShipControl_Simple tugboat_control_generate_messages_cpp)

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html


add_library(${PROJECT_NAME}
  src/logger.cpp
)

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

# Mark executables and/or libraries for installation
 install(TARGETS ${PROJECT_NAME} 
   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
 )

# Mark cpp header files for installation
 install(DIRECTORY include/${PROJECT_NAME}/
   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
   FILES_MATCHING PATTERN "*.h"
   PATTERN ".svn" EXCLUDE
 )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_tugboat_control.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)
