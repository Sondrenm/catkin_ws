classdef Thrust < robotics.ros.Message
    %Thrust MATLAB implementation of tugboat_control/Thrust
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'tugboat_control/Thrust' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'fcc2a347632ee0312c19efd7a2a067b6' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        ID
        Thrust_
        Cwturn
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Cwturn', 'ID', 'Thrust_'} % List of non-constant message properties
        ROSPropertyList = {'cwturn', 'ID', 'thrust'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Thrust(msg)
            %Thrust Construct the message object Thrust
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function id = get.ID(obj)
            %get.ID Get the value for property ID
            id = int8(obj.JavaMessage.getID);
        end
        
        function set.ID(obj, id)
            %set.ID Set the value for property ID
            validateattributes(id, {'numeric'}, {'nonempty', 'scalar'}, 'Thrust', 'ID');
            
            obj.JavaMessage.setID(id);
        end
        
        function thrust_ = get.Thrust_(obj)
            %get.Thrust_ Get the value for property Thrust_
            thrust_ = int8(obj.JavaMessage.getThrust);
        end
        
        function set.Thrust_(obj, thrust_)
            %set.Thrust_ Set the value for property Thrust_
            validateattributes(thrust_, {'numeric'}, {'nonempty', 'scalar'}, 'Thrust', 'Thrust_');
            
            obj.JavaMessage.setThrust(thrust_);
        end
        
        function cwturn = get.Cwturn(obj)
            %get.Cwturn Get the value for property Cwturn
            cwturn = int8(obj.JavaMessage.getCwturn);
        end
        
        function set.Cwturn(obj, cwturn)
            %set.Cwturn Set the value for property Cwturn
            validateattributes(cwturn, {'numeric'}, {'nonempty', 'scalar'}, 'Thrust', 'Cwturn');
            
            obj.JavaMessage.setCwturn(cwturn);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.ID = obj.ID;
            cpObj.Thrust_ = obj.Thrust_;
            cpObj.Cwturn = obj.Cwturn;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.ID = strObj.ID;
            obj.Thrust_ = strObj.Thrust_;
            obj.Cwturn = strObj.Cwturn;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.ID = obj.ID;
            strObj.Thrust_ = obj.Thrust_;
            strObj.Cwturn = obj.Cwturn;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.tugboat_control.Thrust.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.tugboat_control.Thrust;
            obj.reload(strObj);
        end
    end
end
