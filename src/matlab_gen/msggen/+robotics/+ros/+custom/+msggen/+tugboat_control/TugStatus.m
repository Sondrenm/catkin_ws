classdef TugStatus < robotics.ros.Message
    %TugStatus MATLAB implementation of tugboat_control/TugStatus
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'tugboat_control/TugStatus' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '5cbdaa7ad30be6bec977e5b38206d8e9' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        X
        Y
        Theta
        PushingForce
        ID
    end
    
    properties (Constant, Hidden)
        PropertyList = {'ID', 'PushingForce', 'Theta', 'X', 'Y'} % List of non-constant message properties
        ROSPropertyList = {'ID', 'PushingForce', 'theta', 'x', 'y'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = TugStatus(msg)
            %TugStatus Construct the message object TugStatus
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function x = get.X(obj)
            %get.X Get the value for property X
            x = double(obj.JavaMessage.getX);
        end
        
        function set.X(obj, x)
            %set.X Set the value for property X
            validateattributes(x, {'numeric'}, {'nonempty', 'scalar'}, 'TugStatus', 'X');
            
            obj.JavaMessage.setX(x);
        end
        
        function y = get.Y(obj)
            %get.Y Get the value for property Y
            y = double(obj.JavaMessage.getY);
        end
        
        function set.Y(obj, y)
            %set.Y Set the value for property Y
            validateattributes(y, {'numeric'}, {'nonempty', 'scalar'}, 'TugStatus', 'Y');
            
            obj.JavaMessage.setY(y);
        end
        
        function theta = get.Theta(obj)
            %get.Theta Get the value for property Theta
            theta = double(obj.JavaMessage.getTheta);
        end
        
        function set.Theta(obj, theta)
            %set.Theta Set the value for property Theta
            validateattributes(theta, {'numeric'}, {'nonempty', 'scalar'}, 'TugStatus', 'Theta');
            
            obj.JavaMessage.setTheta(theta);
        end
        
        function pushingforce = get.PushingForce(obj)
            %get.PushingForce Get the value for property PushingForce
            pushingforce = single(obj.JavaMessage.getPushingForce);
        end
        
        function set.PushingForce(obj, pushingforce)
            %set.PushingForce Set the value for property PushingForce
            validateattributes(pushingforce, {'numeric'}, {'nonempty', 'scalar'}, 'TugStatus', 'PushingForce');
            
            obj.JavaMessage.setPushingForce(pushingforce);
        end
        
        function id = get.ID(obj)
            %get.ID Get the value for property ID
            javaArray = obj.JavaMessage.getID;
            array = obj.readJavaArray(javaArray, 'uint8');
            id = uint8(array);
        end
        
        function set.ID(obj, id)
            %set.ID Set the value for property ID
            if ~isvector(id) && isempty(id)
                % Allow empty [] input
                id = uint8.empty(0,1);
            end
            
            validateattributes(id, {'numeric'}, {'vector'}, 'TugStatus', 'ID');
            
            javaArray = obj.JavaMessage.getID;
            array = obj.writeJavaArray(id, javaArray, 'uint8');
            obj.JavaMessage.setID(array);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.X = obj.X;
            cpObj.Y = obj.Y;
            cpObj.Theta = obj.Theta;
            cpObj.PushingForce = obj.PushingForce;
            cpObj.ID = obj.ID;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.X = strObj.X;
            obj.Y = strObj.Y;
            obj.Theta = strObj.Theta;
            obj.PushingForce = strObj.PushingForce;
            obj.ID = strObj.ID;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.X = obj.X;
            strObj.Y = obj.Y;
            strObj.Theta = obj.Theta;
            strObj.PushingForce = obj.PushingForce;
            strObj.ID = obj.ID;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.tugboat_control.TugStatus.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.tugboat_control.TugStatus;
            obj.reload(strObj);
        end
    end
end
