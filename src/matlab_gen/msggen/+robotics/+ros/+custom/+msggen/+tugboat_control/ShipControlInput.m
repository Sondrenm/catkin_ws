classdef ShipControlInput < robotics.ros.Message
    %ShipControlInput MATLAB implementation of tugboat_control/ShipControlInput
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'tugboat_control/ShipControlInput' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '945e5ec50a8c1a88de62ff9741f9d15f' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        TugboatControlBoatPoseClass = robotics.ros.msg.internal.MessageFactory.getClassForType('tugboat_control/BoatPose') % Dispatch to MATLAB class for message type tugboat_control/BoatPose
        TugboatControlTugStatusClass = robotics.ros.msg.internal.MessageFactory.getClassForType('tugboat_control/TugStatus') % Dispatch to MATLAB class for message type tugboat_control/TugStatus
    end
    
    properties (Dependent)
        ShipPose
        TugStatus
    end
    
    properties (Access = protected)
        Cache = struct('ShipPose', [], 'TugStatus', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'ShipPose', 'TugStatus'} % List of non-constant message properties
        ROSPropertyList = {'ShipPose', 'TugStatus'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = ShipControlInput(msg)
            %ShipControlInput Construct the message object ShipControlInput
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function shippose = get.ShipPose(obj)
            %get.ShipPose Get the value for property ShipPose
            if isempty(obj.Cache.ShipPose)
                obj.Cache.ShipPose = feval(obj.TugboatControlBoatPoseClass, obj.JavaMessage.getShipPose);
            end
            shippose = obj.Cache.ShipPose;
        end
        
        function set.ShipPose(obj, shippose)
            %set.ShipPose Set the value for property ShipPose
            validateattributes(shippose, {obj.TugboatControlBoatPoseClass}, {'nonempty', 'scalar'}, 'ShipControlInput', 'ShipPose');
            
            obj.JavaMessage.setShipPose(shippose.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.ShipPose)
                obj.Cache.ShipPose.setJavaObject(shippose.getJavaObject);
            end
        end
        
        function tugstatus = get.TugStatus(obj)
            %get.TugStatus Get the value for property TugStatus
            if isempty(obj.Cache.TugStatus)
                javaArray = obj.JavaMessage.getTugStatus;
                array = obj.readJavaArray(javaArray, obj.TugboatControlTugStatusClass);
                obj.Cache.TugStatus = feval(obj.TugboatControlTugStatusClass, array);
            end
            tugstatus = obj.Cache.TugStatus;
        end
        
        function set.TugStatus(obj, tugstatus)
            %set.TugStatus Set the value for property TugStatus
            validateattributes(tugstatus, {obj.TugboatControlTugStatusClass}, {'vector', 'numel', 100}, 'ShipControlInput', 'TugStatus');
            
            javaArray = obj.JavaMessage.getTugStatus;
            array = obj.writeJavaArray(tugstatus, javaArray, obj.TugboatControlTugStatusClass);
            obj.JavaMessage.setTugStatus(array);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.TugStatus)
                obj.Cache.TugStatus = [];
                obj.Cache.TugStatus = obj.TugStatus;
            end
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.ShipPose = [];
            obj.Cache.TugStatus = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Recursively copy compound properties
            cpObj.ShipPose = copy(obj.ShipPose);
            cpObj.TugStatus = copy(obj.TugStatus);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.ShipPose = feval([obj.TugboatControlBoatPoseClass '.loadobj'], strObj.ShipPose);
            TugStatusCell = arrayfun(@(x) feval([obj.TugboatControlTugStatusClass '.loadobj'], x), strObj.TugStatus, 'UniformOutput', false);
            obj.TugStatus = vertcat(TugStatusCell{:});
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.ShipPose = saveobj(obj.ShipPose);
            strObj.TugStatus = arrayfun(@(x) saveobj(x), obj.TugStatus);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.tugboat_control.ShipControlInput.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.tugboat_control.ShipControlInput;
            obj.reload(strObj);
        end
    end
end
