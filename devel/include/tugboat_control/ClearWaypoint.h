// Generated by gencpp from file tugboat_control/ClearWaypoint.msg
// DO NOT EDIT!


#ifndef TUGBOAT_CONTROL_MESSAGE_CLEARWAYPOINT_H
#define TUGBOAT_CONTROL_MESSAGE_CLEARWAYPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tugboat_control
{
template <class ContainerAllocator>
struct ClearWaypoint_
{
  typedef ClearWaypoint_<ContainerAllocator> Type;

  ClearWaypoint_()
    : orderID(0)
    , tugID(0)  {
    }
  ClearWaypoint_(const ContainerAllocator& _alloc)
    : orderID(0)
    , tugID(0)  {
  (void)_alloc;
    }



   typedef uint8_t _orderID_type;
  _orderID_type orderID;

   typedef uint8_t _tugID_type;
  _tugID_type tugID;




  typedef boost::shared_ptr< ::tugboat_control::ClearWaypoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tugboat_control::ClearWaypoint_<ContainerAllocator> const> ConstPtr;

}; // struct ClearWaypoint_

typedef ::tugboat_control::ClearWaypoint_<std::allocator<void> > ClearWaypoint;

typedef boost::shared_ptr< ::tugboat_control::ClearWaypoint > ClearWaypointPtr;
typedef boost::shared_ptr< ::tugboat_control::ClearWaypoint const> ClearWaypointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tugboat_control::ClearWaypoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tugboat_control::ClearWaypoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tugboat_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'tugboat_control': ['/home/sondre/catkin_ws/src/tugboat_control/msg', '/home/sondre/catkin_ws/src/tugboat_control/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tugboat_control::ClearWaypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tugboat_control::ClearWaypoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tugboat_control::ClearWaypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tugboat_control::ClearWaypoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tugboat_control::ClearWaypoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tugboat_control::ClearWaypoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tugboat_control::ClearWaypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8bfe7bbf9baec34c11567f7f4f04bf49";
  }

  static const char* value(const ::tugboat_control::ClearWaypoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8bfe7bbf9baec34cULL;
  static const uint64_t static_value2 = 0x11567f7f4f04bf49ULL;
};

template<class ContainerAllocator>
struct DataType< ::tugboat_control::ClearWaypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tugboat_control/ClearWaypoint";
  }

  static const char* value(const ::tugboat_control::ClearWaypoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tugboat_control::ClearWaypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 orderID\n\
uint8 tugID\n\
";
  }

  static const char* value(const ::tugboat_control::ClearWaypoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tugboat_control::ClearWaypoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.orderID);
      stream.next(m.tugID);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ClearWaypoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tugboat_control::ClearWaypoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tugboat_control::ClearWaypoint_<ContainerAllocator>& v)
  {
    s << indent << "orderID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.orderID);
    s << indent << "tugID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tugID);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TUGBOAT_CONTROL_MESSAGE_CLEARWAYPOINT_H
