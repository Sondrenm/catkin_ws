// Generated by gencpp from file tugboat_control/BoatList.msg
// DO NOT EDIT!


#ifndef TUGBOAT_CONTROL_MESSAGE_BOATLIST_H
#define TUGBOAT_CONTROL_MESSAGE_BOATLIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <tugboat_control/BoatStatus.h>

namespace tugboat_control
{
template <class ContainerAllocator>
struct BoatList_
{
  typedef BoatList_<ContainerAllocator> Type;

  BoatList_()
    : timestamp(0.0)
    , boat()  {
    }
  BoatList_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , boat(_alloc)  {
  (void)_alloc;
    }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef std::vector< ::tugboat_control::BoatStatus_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::tugboat_control::BoatStatus_<ContainerAllocator> >::other >  _boat_type;
  _boat_type boat;




  typedef boost::shared_ptr< ::tugboat_control::BoatList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tugboat_control::BoatList_<ContainerAllocator> const> ConstPtr;

}; // struct BoatList_

typedef ::tugboat_control::BoatList_<std::allocator<void> > BoatList;

typedef boost::shared_ptr< ::tugboat_control::BoatList > BoatListPtr;
typedef boost::shared_ptr< ::tugboat_control::BoatList const> BoatListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tugboat_control::BoatList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tugboat_control::BoatList_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tugboat_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'tugboat_control': ['/home/sondre/catkin_ws/src/tugboat_control/msg', '/home/sondre/catkin_ws/src/tugboat_control/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tugboat_control::BoatList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tugboat_control::BoatList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tugboat_control::BoatList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tugboat_control::BoatList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tugboat_control::BoatList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tugboat_control::BoatList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tugboat_control::BoatList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1df20aa31d5e143e5b643777392ea400";
  }

  static const char* value(const ::tugboat_control::BoatList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1df20aa31d5e143eULL;
  static const uint64_t static_value2 = 0x5b643777392ea400ULL;
};

template<class ContainerAllocator>
struct DataType< ::tugboat_control::BoatList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tugboat_control/BoatList";
  }

  static const char* value(const ::tugboat_control::BoatList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tugboat_control::BoatList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 timestamp\n\
tugboat_control/BoatStatus[] boat\n\
================================================================================\n\
MSG: tugboat_control/BoatStatus\n\
uint8 ID # ID == 0 indicates ship\n\
float64 x #x position in meters\n\
float64 y #y position in meters\n\
float64 o #orientation in +-pi radians from \"east\"\n\
float32 force # Newton\n\
";
  }

  static const char* value(const ::tugboat_control::BoatList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tugboat_control::BoatList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.boat);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct BoatList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tugboat_control::BoatList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tugboat_control::BoatList_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "boat[]" << std::endl;
    for (size_t i = 0; i < v.boat.size(); ++i)
    {
      s << indent << "  boat[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::tugboat_control::BoatStatus_<ContainerAllocator> >::stream(s, indent + "    ", v.boat[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TUGBOAT_CONTROL_MESSAGE_BOATLIST_H
