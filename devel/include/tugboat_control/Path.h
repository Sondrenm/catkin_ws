// Generated by gencpp from file tugboat_control/Path.msg
// DO NOT EDIT!


#ifndef TUGBOAT_CONTROL_MESSAGE_PATH_H
#define TUGBOAT_CONTROL_MESSAGE_PATH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <tugboat_control/Waypoint.h>

namespace tugboat_control
{
template <class ContainerAllocator>
struct Path_
{
  typedef Path_<ContainerAllocator> Type;

  Path_()
    : tugID(0)
    , orderID(0)
    , data()  {
    }
  Path_(const ContainerAllocator& _alloc)
    : tugID(0)
    , orderID(0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _tugID_type;
  _tugID_type tugID;

   typedef uint8_t _orderID_type;
  _orderID_type orderID;

   typedef std::vector< ::tugboat_control::Waypoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::tugboat_control::Waypoint_<ContainerAllocator> >::other >  _data_type;
  _data_type data;




  typedef boost::shared_ptr< ::tugboat_control::Path_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tugboat_control::Path_<ContainerAllocator> const> ConstPtr;

}; // struct Path_

typedef ::tugboat_control::Path_<std::allocator<void> > Path;

typedef boost::shared_ptr< ::tugboat_control::Path > PathPtr;
typedef boost::shared_ptr< ::tugboat_control::Path const> PathConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tugboat_control::Path_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tugboat_control::Path_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tugboat_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'tugboat_control': ['/home/sondre/catkin_ws/src/tugboat_control/msg', '/home/sondre/catkin_ws/src/tugboat_control/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tugboat_control::Path_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tugboat_control::Path_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tugboat_control::Path_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tugboat_control::Path_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tugboat_control::Path_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tugboat_control::Path_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tugboat_control::Path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f0271dfc1e84d185aae5c12a5ce14e50";
  }

  static const char* value(const ::tugboat_control::Path_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf0271dfc1e84d185ULL;
  static const uint64_t static_value2 = 0xaae5c12a5ce14e50ULL;
};

template<class ContainerAllocator>
struct DataType< ::tugboat_control::Path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tugboat_control/Path";
  }

  static const char* value(const ::tugboat_control::Path_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tugboat_control::Path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 tugID\n\
uint8 orderID\n\
Waypoint[] data\n\
================================================================================\n\
MSG: tugboat_control/Waypoint\n\
uint8 ID\n\
float64 x #	x position in meters\n\
float64 y #	y position in meters\n\
float64 v #	Velocity in m/s\n\
float64 o #	Orientation in +- pi radians from x-axis, for ship. Set outside scope to ignore Orientation\n\
";
  }

  static const char* value(const ::tugboat_control::Path_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tugboat_control::Path_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tugID);
      stream.next(m.orderID);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Path_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tugboat_control::Path_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tugboat_control::Path_<ContainerAllocator>& v)
  {
    s << indent << "tugID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tugID);
    s << indent << "orderID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.orderID);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::tugboat_control::Waypoint_<ContainerAllocator> >::stream(s, indent + "    ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TUGBOAT_CONTROL_MESSAGE_PATH_H
