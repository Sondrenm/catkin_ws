// Generated by gencpp from file tugboat_control/TugStatus.msg
// DO NOT EDIT!


#ifndef TUGBOAT_CONTROL_MESSAGE_TUGSTATUS_H
#define TUGBOAT_CONTROL_MESSAGE_TUGSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tugboat_control
{
template <class ContainerAllocator>
struct TugStatus_
{
  typedef TugStatus_<ContainerAllocator> Type;

  TugStatus_()
    : ID()
    , x(0.0)
    , y(0.0)
    , theta(0.0)
    , PushingForce(0.0)  {
    }
  TugStatus_(const ContainerAllocator& _alloc)
    : ID(_alloc)
    , x(0.0)
    , y(0.0)
    , theta(0.0)
    , PushingForce(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _ID_type;
  _ID_type ID;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _theta_type;
  _theta_type theta;

   typedef float _PushingForce_type;
  _PushingForce_type PushingForce;




  typedef boost::shared_ptr< ::tugboat_control::TugStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tugboat_control::TugStatus_<ContainerAllocator> const> ConstPtr;

}; // struct TugStatus_

typedef ::tugboat_control::TugStatus_<std::allocator<void> > TugStatus;

typedef boost::shared_ptr< ::tugboat_control::TugStatus > TugStatusPtr;
typedef boost::shared_ptr< ::tugboat_control::TugStatus const> TugStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tugboat_control::TugStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tugboat_control::TugStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tugboat_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'tugboat_control': ['/home/sondre/catkin_ws/src/tugboat_control/msg', '/home/sondre/catkin_ws/src/tugboat_control/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tugboat_control::TugStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tugboat_control::TugStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tugboat_control::TugStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tugboat_control::TugStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tugboat_control::TugStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tugboat_control::TugStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tugboat_control::TugStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5cbdaa7ad30be6bec977e5b38206d8e9";
  }

  static const char* value(const ::tugboat_control::TugStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5cbdaa7ad30be6beULL;
  static const uint64_t static_value2 = 0xc977e5b38206d8e9ULL;
};

template<class ContainerAllocator>
struct DataType< ::tugboat_control::TugStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tugboat_control/TugStatus";
  }

  static const char* value(const ::tugboat_control::TugStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tugboat_control::TugStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[] ID # ID > 99 indicates ship\n\
float64 x #x position in meters\n\
float64 y #y position in meters\n\
float64 theta #orientation in radians or degrees?\n\
float32 PushingForce # Newton\n\
";
  }

  static const char* value(const ::tugboat_control::TugStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tugboat_control::TugStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ID);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.theta);
      stream.next(m.PushingForce);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct TugStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tugboat_control::TugStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tugboat_control::TugStatus_<ContainerAllocator>& v)
  {
    s << indent << "ID[]" << std::endl;
    for (size_t i = 0; i < v.ID.size(); ++i)
    {
      s << indent << "  ID[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.ID[i]);
    }
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
    s << indent << "PushingForce: ";
    Printer<float>::stream(s, indent + "  ", v.PushingForce);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TUGBOAT_CONTROL_MESSAGE_TUGSTATUS_H
