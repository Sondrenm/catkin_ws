# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tugboat_control/BoatList.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import tugboat_control.msg

class BoatList(genpy.Message):
  _md5sum = "fb1531b66e8422b2c672c2aeeec4a39f"
  _type = "tugboat_control/BoatList"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """tugboat_control/BoatStatus[50] boat
================================================================================
MSG: tugboat_control/BoatStatus
uint8 ID # ID == 0 indicates ship
float64 x #x position in meters
float64 y #y position in meters
float64 o #orientation in +-pi radians from "east"
float32 force # Newton"""
  __slots__ = ['boat']
  _slot_types = ['tugboat_control/BoatStatus[50]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       boat

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BoatList, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.boat is None:
        self.boat = [tugboat_control.msg.BoatStatus() for _ in range(50)]
    else:
      self.boat = [tugboat_control.msg.BoatStatus() for _ in range(50)]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      for val1 in self.boat:
        _x = val1
        buff.write(_get_struct_B3df().pack(_x.ID, _x.x, _x.y, _x.o, _x.force))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.boat is None:
        self.boat = None
      end = 0
      self.boat = []
      for i in range(0, 50):
        val1 = tugboat_control.msg.BoatStatus()
        _x = val1
        start = end
        end += 29
        (_x.ID, _x.x, _x.y, _x.o, _x.force,) = _get_struct_B3df().unpack(str[start:end])
        self.boat.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      for val1 in self.boat:
        _x = val1
        buff.write(_get_struct_B3df().pack(_x.ID, _x.x, _x.y, _x.o, _x.force))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.boat is None:
        self.boat = None
      end = 0
      self.boat = []
      for i in range(0, 50):
        val1 = tugboat_control.msg.BoatStatus()
        _x = val1
        start = end
        end += 29
        (_x.ID, _x.x, _x.y, _x.o, _x.force,) = _get_struct_B3df().unpack(str[start:end])
        self.boat.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B3df = None
def _get_struct_B3df():
    global _struct_B3df
    if _struct_B3df is None:
        _struct_B3df = struct.Struct("<B3df")
    return _struct_B3df
